{
  "form": {
    "apiKeyTypes": {
      "test": "Test",
      "live": "Live"
    },
    "authTypes": {
      "basic": "Basic",
      "bearer-token": "Bearer token",
      "none": "None"
    },
    "booleanSelect": {
      "true": "Yes",
      "false": "No"
    },
    "label": {
      "authType": "Auth type",
      "advancedSettings": "Advanced settings",
      "apiKey": "API Key",
      "apiSecret": "API Secret",
      "apiSecretSet": "API secret is set",
      "apiKeyName": "API Key name",
      "apiKeyType": "API Key type",
      "bearerToken": "Bearer token",
      "bucketDescription": "Bucket description",
      "bucketName": "Bucket name",
      "cardHolder": "Card holder",
      "cardNumber": "Card number",
      "chat": "Hub",
      "chatInfo": "Select one of your Hubs. Otherwise, you can leave this field empty and the default hub will be used.",
      "chatInfoEmpty": "You must create a Hub first. Otherwise, you can leave this field empty and the default hub will be used.",
      "chatAbout": "About",
      "chatImage": "Hub image",
      "chatName": "Hub name",
      "chatTags": "Tags",
      "confirmPassword": "Confirm password",
      "creditThreshold": "Notify me when credits are below the limit",
      "cvv": "CVV",
      "description": "Description",
      "domain": "Domain name",
      "email": "Email address",
      "folderName": "Folder name",
      "folderDescription": "Folder description",
      "hostingDescription": "Hosting description",
      "hostingName": "Hosting name",
      "hostingSize": "Hosting size",
      "indexerName": "Indexer name",
      "indexerDescription": "Indexer description",
      "inviteByEmail": "Invite by email",
      "ipnsDescription": "IPNS record description (for personal reference)",
      "ipnsName": "IPNS record name (for personal reference)",
      "expirationDate": "Expiration date",
      "networkType": "Choose the desired network",
      "password": "Enter a {length}-character password",
      "phone": "Phone",
      "postalCode": "Postal code",
      "projectName": "Project name",
      "projectDescription": "Project description",
      "role": "Role",
      "serviceName": "Service name",
      "username": "First and last name",
      "webhookPassword": "Password",
      "webhookUrl": "Webhook URL",
      "webhookUsername": "User name",
      "assetHub": {
        "address": "Address",
        "admin": "Admin address",
        "amount": "Amount",
        "decimals": "Decimals",
        "deposit": "Deposit",
        "freezer": "Freezer Address",
        "id": "Asset ID",
        "supply": "Initial supply",
        "issuer": "Issuer Address",
        "minBalance": "Minimum balance",
        "name": "Asset name",
        "network": "Network",
        "owner": "Owner Address",
        "status": "Status",
        "symbol": "Asset symbol"
      },
      "collection": {
        "adminAddress": "Admin address",
        "autoIncrement": "Auto Increment",
        "baseUri": "Base URI",
        "baseExtension": "Base Extension",
        "chain": "Chain",
        "chainType": "Chain type",
        "coverImage": "Collection cover image",
        "dropAddress": "Drop Withdrawal Address",
        "dropStart": "Minting start time",
        "drop": "Drop",
        "dropPrice": "Minting price in {currency}",
        "dropReserve": "Reserve NFTs",
        "initialOwner": "Initial owner",
        "logo": "Collection logo",
        "maxSupply": "How many?",
        "name": "Name",
        "revocable": "Revokable",
        "royaltiesAddress": "Royalties address",
        "royaltiesFees": "Royalties percentage",
        "soulbound": "Soulbound",
        "symbol": "Symbol",
        "supplyLimited": "Total supply",
        "type": "Collection type",
        "uri": "Base URI",
        "useGateway": "Use apillon gateway for base URI",
        "useIpns": "Dynamic metadata",
        "labelInfo": {
          "adminAddress": "The admin of a collection is able to grant and revoke control of the contract to addresses. You can change this later.",
          "autoIncrement": "Mark YES to let the system assign NFT IDs in correct order for you. Mark NO if you prefer to manually assign each ID and match it with the correct owner.",
          "baseExtension": "",
          "baseUri": "Paste the collection metadata base URI here.",
          "chain": "Select the network where your NFTs will be deployed",
          "chainType": "",
          "csvUpload": "Before adding new items to the collection with existing NFTs, please add an id column to the CSV file. This will help maintain data integrity and avoid any conflicts when adding new entries.",
          "dropStart": "A date when your NFT collection becomes publicly available for visitors to buy NFTs.",
          "drop": "With drop, your collection becomes accessible for visitors to buy NFTs from a certain date onwards.",
          "dropAddress": "Substrate Address",
          "dropPrice": "Set the price per NFT in GLMR.",
          "dropReserve": "Specify how many NFTs you want to reserve for your wallet before public minting opens.",
          "initialOwner": "Initial owner of an NFT collection get access to exclusive rewards, increased resale potential, community influence, and potential royalties.",
          "logoSize": "Maximum size: 3MB, Supported formats: JPG, PNG, GIF, SVG. Recommended size: 400 x 400 px.",
          "maxSupply": "The maximum number of NFTs in this collection. Once set, you won't be able to add more files than specified to the collection.",
          "name": "The collection’s name as it will appear in marketplaces.",
          "nftDisplayType": "Display type is a field indicating how you would like it to be displayed",
          "revocable": "Enable this if you want the option to revoke NFTs after minting. Collection owner will be allowed to destroy NFT(s).",
          "royaltiesAddress": "The wallet where royalty payments will be sent.",
          "royaltiesFees": "The share you’ll receive from each NFT transaction.",
          "soulbound": " Prevents NFTs from being sold or transferred (they stay bound to the wallet).",
          "supplyLimited": "With limited, you set a fixed number of NFTs in this collection. With unlimited there's no cap on how many NFTs you can create, good for ongoing drops or evolving collections.",
          "symbol": "A short identifier (a ticker) for your collection.",
          "type": "",
          "uri": "Paste the collection metadata base URI here.",
          "useGateway": "Collection base URI points to IPFS. If this checkbox is checked, base URI will point to CID on Apillon private gateway, which provide better performance. Otherwise base URI points to: ipfs://[CID], and gateway needs to be handled manually.",
          "useIpns": "When this option is selected, the IPNS will be created. This option will allow you to add more NFTs to your collection later."
        }
      },
      "contract": {
        "accountAddress": "Account Address",
        "amount": "Amount",
        "cid": "CID",
        "contractType": "Contract type",
        "description": "Contract description",
        "file": "File",
        "name": "Contract name",
        "nftContractAddress": "NFT collection address",
        "nftChainRpcUrl": "Chain RPC URL",
        "nftId": "NFT ID",
        "restrictToOwner": "Restrict to owner",
        "useApillonCollection": "Use Apillon-built NFT collection",
        "labelInfo": {
          "nftContractAddress": "Address of the NFT collection used to encrypt/decrypt files.",
          "nftChainRpcUrl": "Chain RPC URL of used contract. Select one from the list or manually insert your own.",
          "restrictToOwner": "Only owner will be able to encrypt/decrypt files.",
          "useApillonCollection": "You can use an NFT collection you created on Apillon or any NFT collection you built on other chains."
        }
      },
      "cloudFunctions": {
        "name": "Title",
        "jobName": "Job name",
        "slots": "Number of processors",
        "startTime": "Start time",
        "endTime": "End time",
        "varKey": "Key",
        "varValue": "Value",
        "labelInfo": {
          "slots": "Multi-processor jobs will be supported soon"
        }
      },
      "embeddedWallet": {
        "title": "Embedded wallet’s title",
        "description": "Embedded wallet’s description",
        "integration": "Embedded wallet Integration",
        "whitelistedDomains": "Whitelisted Domains",
        "labelInfo": {
          "integration": "The embedded wallet will only be added to the Simplet if you select this option.",
          "whitelistedDomains": "Prevent third-parties from using your integration by restricting access to allowed domains \n- Authorize all domains with * \n  Example: *.apillon.io accepts all .apillon.io sites \n- Authorize local URLs with localhost:&lt;port&gt; \n- Separate domains by commas"
        }
      },
      "mysql": {
        "host": "MySql Host",
        "port": "MySql Port",
        "database": "Database",
        "user": "MySql User",
        "password": "MySql Password"
      },
      "nft": {
        "addressEvm": "EVM Address",
        "addressSubstrate": "Substrate Address",
        "addressUnique": "Unique Address",
        "attributes": "Add metadata attributes",
        "burnTokenId": "Token ID",
        "collection": "Collection",
        "copies": "Copies",
        "displayType": "Type",
        "id": "ID",
        "idsToMint": "IDs to Mint",
        "image": "NFT image",
        "mintCollectionUuid": "Collection",
        "mintParentNftId": "Parent NFT ID",
        "mintQuantity": "Quantity",
        "name": "Name",
        "setBaseUri": "Set base URI",
        "traitType": "Trait",
        "value": "Value",
        "labelInfo": {
          "attributes": "Attributes are key traits of NFTs, forming part of the metadata that defines their unique characteristics. Which ones would you like to include?",
          "image": "Upload image, video, audio, or a 3D-model. Supported file formats: JPG, PNG, GIF, SVG, MP4, WEBM, MP3, WAV, OGG, GLB."
        }
      },
      "rpcApiKey": {
        "name": "Name",
        "description": "Description"
      },
      "simplet": {
        "endTime": "End time",
        "name": "Simplet name",
        "startTime": "Start time",
        "walletAddress": "Wallet address",
        "labelInfo": {
          "walletAddress": "Where the NFTs will come from. Enter the wallet address that will power this Simplet."
        }
      },
      "smtp": {
        "host": "SMTP Host",
        "port": "SMTP Port",
        "username": "SMTP Username",
        "password": "SMTP Password",
        "sender": "Sender name (from)",
        "email": "Sender email (from)"
      },
      "website": {
        "description": "Website description",
        "name": "Website name",
        "repository": "Repository",
        "repoUrl": "Repository URL",
        "branchName": "Branch name",
        "buildCommand": "Build command",
        "buildDirectory": "Build directory",
        "installCommand": "Install command",
        "type": "Website type"
      }
    },
    "networkTypes": {
      "test": "Test network",
      "live": "Live network"
    },
    "placeholder": {
      "apiKeyName": "API Key name",
      "apiKey": "Select your API key",
      "apiSecret": "Enter your API secret",
      "bearerToken": "Enter Bearer token",
      "bucketDescription": "Bucket description",
      "bucketName": "Bucket name",
      "bucketType": "Select Bucket type",
      "chain": "Select Chain",
      "chatTags": "Separate Tags with Commas",
      "collectionMaxSupply": "Max supply",
      "complexPassword": "Enter complex password",
      "cvv": "311",
      "domain": "Type your domain name here",
      "email": "youremail{afna}mail.com",
      "fileStatus": "Select file status",
      "folderName": "",
      "folderDescription": "",
      "hostingDescription": "Hosting description",
      "hostingName": "Hosting name",
      "indexerName": "Indexer name",
      "indexerDescription": "Indexer description",
      "inviteByEmail": "Type e-mail",
      "ipnsDescription": "IPNS description",
      "ipnsName": "IPNS name",
      "expirationDate": "01/2023",
      "nftBurnTokenId": "Token ID",
      "nftMintAddress": "Address",
      "nftMintParentNftId": "Parent NFT ID",
      "nftMintQuantity": "Quantity",
      "nftTransferAddress": "Address",
      "number": "Enter number",
      "onlyJsFiles": "Only .js files are allowed",
      "password": "password",
      "phone": "+000 12345678",
      "postalCode": "4223",
      "projectName": "Enter project name",
      "projectDescription": "Enter project description",
      "reenterPassword": "Re-enter your complex password",
      "role": "Select role",
      "serviceName": "Enter the name for the new service",
      "select": "Select option",
      "selectCategory": "Filter by category",
      "selectDirection": "Filter by direction",
      "selectService": "Filter by service",
      "typeHere": "Type here",
      "username": "Enter your full name",
      "webhookPassword": "Enter password",
      "webhookUrl": "Webhook URL",
      "webhookUsername": "Enter user name",
      "assetHub": {
        "address": "Enter target address",
        "amount": "Enter amount",
        "network": "Network",
        "name": "Type name",
        "symbol": "Type asset symbol",
        "assetId": "Asset ID",
        "decimals": "Decimals",
        "supply": "Initial supply",
        "minBalance": "Minimum Balance",
        "issuerAddress": "Issuer Address",
        "freezerAddress": "Freezer Address"
      },
      "contract": {
        "name": "Enter contract name",
        "description": "Enter contract description",
        "nftContractAddress": "Select or type NFT collection address",
        "nftChainRpcUrl": "Chain RPC URL",
        "accountAddress": "Account Address"
      },
      "cloudFunctions": {
        "description": "Enter cloud function description for personal reference",
        "name": "Enter cloud function title for personal reference",
        "jobName": "Enter cloud function job name for personal reference"
      },
      "embeddedWallet": {
        "title": "Enter the title for your personal reference",
        "description": "Enter the description for your personal reference",
        "whitelistedDomains": "valid-domain.com\n*.valid-domain2.com\nsubdomain.*.valid-domain3.com"
      },
      "indexer": {
        "logLevels": "Log levels",
        "containers": "Containers"
      },
      "mysql": {
        "host": "localhost",
        "port": "3306",
        "database": "database",
        "user": "user",
        "password": "secret"
      },
      "nft": {
        "idsToMint": "Enter NFT IDs you want to mint"
      },
      "rpcApiKey": {
        "name": "Enter key name",
        "description": "Enter key description"
      },
      "simplet": {
        "name": "Just for your eyes—helps you keep things organized.",
        "description": "Optional. Add a note for future-you (or teammates) to remember what this setup is for.",
        "walletAddress": "Where the NFTs will come from. Enter the wallet address that will power this Simplet."
      },
      "smtp": {
        "host": "Your mail server host (e.g. smtp.yourdomain.com)",
        "port": "465",
        "username": "e.g. user'{afna}'gmail.com",
        "password": "***",
        "sender": "Who the emails will be from (e.g. NFT Airdrop)",
        "email": "e.g. user/{afna}gmail.com"
      },
      "website": {
        "description": "Website description",
        "name": "Website name",
        "branchName": "Enter branch",
        "buildCommand": "Enter build command",
        "buildDirectory": "Enter build directory",
        "installCommand": "Enter install command",
        "repository": "Select repository"
      }
    },
    "error": {
      "rpcEmailTaken": "Dwellir user with this email already exists. Please remove the user or use another email.",
      "wrongLoginType": "Please use email & password to sign in."
    },
    "success": {
      "apiKey": "API key has been created",
      "assetMinted": "Asset tokens have been minted",
      "assetSend": "Asset tokens have been send",
      "assetTransferred": "Asset ownership has been transferred",
      "filesUploaded": "Files have been successfully uploaded",
      "ipnsPublish": "IPNS is published in the background. You will be notified when it is done.",
      "ipnsPublished": "IPNS has been published",
      "nftBurned": "NFT token has been burned.",
      "nftDeployed": "NFT deploy requested.",
      "nftMint": "Minting NFT requested.",
      "nftSetBaseUri": "Base URI has been changed",
      "nftTransfer": "NFT ownership has been transferred",
      "profile": "Your profile data has been updated",
      "requestPasswordChange": "Check your mailbox! If nothing is there, we couldn't find your account.",
      "sendAgainEmail": "Email has been re-sent",
      "websiteDeployed": "Website has been deployed.",
      "websiteDeploying": "Done - deployment initiated",
      "smartContract": "Done - deployment initiated",
      "contract": {
        "cidAssign": "CID has been assign to NFT",
        "deploy": "Contract deploy has been initiated",
        "encrypted": "Content has been encrypted",
        "transferred": "Contract transfer has been initiated"
      },
      "created": {
        "apiKey": "API key has been created",
        "apiKeyRole": "API key permission has been added",
        "apiKeyRoles": "API key permissions has been added",
        "asset": "Asset has been created",
        "authentication": "Authentication service has been created",
        "bucket": "Bucket has been created",
        "chatPost": "Channel has been created",
        "chatSpace": "Hub has been created",
        "cloudFunction": "Cloud function has been created",
        "cloudFunctionJob": "Job deployment has been initiated",
        "cloudFunctionVariable": "Cloud function variables have been created",
        "collection": "Creating NFT collection requested.",
        "directory": "Folder has been created",
        "domain": "Domain has been added to Website",
        "embeddedWallet": "Embedded Wallet has been created",
        "file": "File has been created",
        "hosting": "Hosting has been created",
        "ipns": "IPNS has been created",
        "item": "Item has been created",
        "nftCollection": "NFT collection successfully created",
        "rpcApiKey": "RPC API key has been created",
        "rpcEndpoint": "RPC endpoint has been added",
        "service": "Service has been created",
        "userInvite": "User has been invited.",
        "webhook": "Webhook has been created",
        "website": "Website has been created",
        "indexer": "Indexer has been created"
      },
      "deleted": {
        "apiKey": "API key has been deleted",
        "apiKeyRole": "API key permission has been removed",
        "authentication": "Authentication service has been deleted",
        "bucket": "Bucket has been deleted",
        "bucketContent": "Bucket items has been deleted",
        "collection": "NFT collection has been archived",
        "cloudFunction": "Cloud function has been archived",
        "contract": "Contract has been deleted",
        "directory": "Folder has been deleted",
        "domain": "Domain has been deleted",
        "file": "File has been deleted",
        "hosting": "Hosting has been archived",
        "ipns": "IPNS has been deleted",
        "item": "Item has been deleted",
        "items": "Items has been deleted",
        "post": "Channel has been archived",
        "rpcEndpoint": "RPC endpoint has been removed from favorites",
        "space": "Hub has been archived",
        "service": "Service has been deleted",
        "smartContract": "Smart Contract has been archived",
        "user": "User has been removed from project",
        "userUninvited": "User has been uninvited from project",
        "webhook": "Webhook has been deleted",
        "website": "Website has been archived",
        "indexer": "Indexer has been deleted"
      },
      "restored": {
        "bucket": "Bucket has been restored",
        "chat": "Hub has been restored",
        "cloudFunction": "Cloud Function has been restored",
        "collection": "NFT collection has been restored",
        "contract": "Contract has been restored",
        "directory": "Folder has been restored",
        "file": "File has been restored",
        "post": "Channel has been restored",
        "simplet": "Simplet has been restored",
        "smartContract": "Smart Contract has been restored",
        "website": "Website has been restored"
      },
      "updated": {
        "apiKey": "API key has been updated",
        "apiKeyRole": "API key permission has been added",
        "apiKeyRoles": "API key permissions has been added",
        "asset": "Asset metadata has been updated",
        "assetFreezer": "Asset freezer has been updated",
        "assetIssuer": "Asset issuer has been updated",
        "authentication": "Authentication service has been updated",
        "bucket": "Bucket has been updated",
        "cloudFunction": "Cloud function has been updated",
        "cloudFunctionJob": "Job has been updated",
        "cloudFunctionVariable": "Cloud function variables have been updated",
        "contract": "Contract has been updated",
        "creditThreshold": "Credit threshold has been updated",
        "directory": "Folder has been updated",
        "domain": "Domain has been updated",
        "embeddedWallet": "Embedded Wallet has been updated",
        "file": "File has been updated",
        "hosting": "Hosting has been updated",
        "indexer": "Indexer has been updated",
        "ipns": "IPNS has been updated",
        "item": "Item has been updated",
        "project": "Project has been updated",
        "rpcApiKey": "RPC API key has been updated",
        "service": "Service has been updated",
        "userRole": "User role has been updated",
        "webhook": "Webhook has been updated",
        "website": "Website has been updated"
      },
      "newsletter": {
        "subscribed": "You have successfully subscribed to Apillon platform news."
      }
    },
    "supplyTypes": {
      "limited": "Limited",
      "unlimited": "Unlimited"
    },
    "switch": {
      "on": "On",
      "off": "Off"
    },
    "terms": {
      "project": "I understand that the Apillon Closed Beta delivers no guarantees related to functionalities or access and is intended for testing purposes only. Beta features also come with several limitations, which will be removed with each platform update as more and more users deliver feedback on Closed Beta and help improve the platform's services.",
      "payment": "I understand the billing process and some other legal stuff."
    },
    "cancel": "Cancel",
    "confirm": "Yes, confirm",
    "connect": "Connect",
    "createBucketAndContinue": "Create bucket & continue to management",
    "createHostingAndContinue": "Create hosting & continue to management",
    "createNewProject": "Create project",
    "createNewService": "Create new service",
    "createServiceAndContinue": "Create service & continue to management",
    "continue": "Continue",
    "disabled": "Disabled",
    "deploy": "Deploy",
    "generate": "Generate",
    "goBack": "Go back",
    "login": "Log in",
    "proceed": "Proceed",
    "reset": "Reset",
    "save": "Save",
    "saveCard": "Save card",
    "saveExit": "Save & exit",
    "sendInvite": "Send invite",
    "sign": "Sign and continue",
    "startFirstProject": "Start your first project",
    "update": "Update"
  }
}
