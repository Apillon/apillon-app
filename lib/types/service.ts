/**
 * Service ENUM
 */
export enum ServiceType {
  AUTHENTICATION = 1,
  STORAGE = 2,
  NFT = 3,
  HOSTING = 4,
  COMPUTING = 5,
  EMBEDDED_WALLET = 7,
  SMART_CONTRACTS = 8,
  RPC = 9,
  INDEXING = 10,
  SIMPLETS = 11,
  CLOUD_FUNCTIONS = 50,
  ASSET_HUB = 51,
}
export enum ServiceTypeName {
  ASSET_HUB = 'ASSET_HUB',
  AUTHENTICATION = 'IDENTITY',
  CLOUD_FUNCTIONS = 'CLOUD_FUNCTIONS',
  COMPUTING = 'COMPUTING',
  SMART_CONTRACTS = 'CONTRACTS',
  HOSTING = 'HOSTING',
  INDEXING = 'INDEXING',
  NFT = 'NFT',
  RPC = 'RPC',
  SIMPLETS = 'SIMPLETS',
  STORAGE = 'STORAGE',
  EMBEDDED_WALLET = 'WALLET',
}

export enum IdentityChains {
  KILT = 'KILT',
}

/**
 * Names of Product price names of all services
 */
export enum PriceServiceName {
  HOSTING_WEBSITE = 'HOSTING_WEBSITE',
  HOSTING_DEPLOY_TO_STAGING = 'HOSTING_DEPLOY_TO_STAGING',
  HOSTING_DEPLOY_TO_PRODUCTION = 'HOSTING_DEPLOY_TO_PRODUCTION',
  HOSTING_CHANGE_WEBSITE_DOMAIN = 'HOSTING_CHANGE_WEBSITE_DOMAIN',

  NFT_ASTAR_BURN = 'NFT_ASTAR_BURN',
  NFT_ASTAR_COLLECTION = 'NFT_ASTAR_COLLECTION',
  NFT_ASTAR_MINT = 'NFT_ASTAR_MINT',
  NFT_ASTAR_SET_BASE_URI = 'NFT_ASTAR_SET_BASE_URI',
  NFT_ASTAR_TRANSFER_COLLECTION = 'NFT_ASTAR_TRANSFER_COLLECTION',

  NFT_ASTAR_WASM_BURN = 'NFT_ASTAR_WASM_BURN',
  NFT_ASTAR_WASM_COLLECTION = 'NFT_ASTAR_WASM_COLLECTION',
  NFT_ASTAR_WASM_MINT = 'NFT_ASTAR_WASM_MINT',
  NFT_ASTAR_WASM_SET_BASE_URI = 'NFT_ASTAR_WASM_SET_BASE_URI',
  NFT_ASTAR_WASM_TRANSFER_COLLECTION = 'NFT_ASTAR_WASM_TRANSFER_COLLECTION',

  NFT_ETHEREUM_BURN = 'NFT_ETHEREUM_BURN',
  NFT_ETHEREUM_COLLECTION = 'NFT_ETHEREUM_COLLECTION',
  NFT_ETHEREUM_MINT = 'NFT_ETHEREUM_MINT',
  NFT_ETHEREUM_SET_BASE_URI = 'NFT_ETHEREUM_SET_BASE_URI',
  NFT_ETHEREUM_TRANSFER_COLLECTION = 'NFT_ETHEREUM_TRANSFER_COLLECTION',

  NFT_MOONBASE_BURN = 'NFT_MOONBASE_BURN',
  NFT_MOONBASE_COLLECTION = 'NFT_MOONBASE_COLLECTION',
  NFT_MOONBASE_MINT = 'NFT_MOONBASE_MINT',
  NFT_MOONBASE_SET_BASE_URI = 'NFT_MOONBASE_SET_BASE_URI',
  NFT_MOONBASE_TRANSFER_COLLECTION = 'NFT_MOONBASE_TRANSFER_COLLECTION',

  NFT_MOONBEAM_BURN = 'NFT_MOONBEAM_BURN',
  NFT_MOONBEAM_COLLECTION = 'NFT_MOONBEAM_COLLECTION',
  NFT_MOONBEAM_MINT = 'NFT_MOONBEAM_MINT',
  NFT_MOONBEAM_SET_BASE_URI = 'NFT_MOONBEAM_SET_BASE_URI',
  NFT_MOONBEAM_TRANSFER_COLLECTION = 'NFT_MOONBEAM_TRANSFER_COLLECTION',

  NFT_SEPOLIA_BURN = 'NFT_SEPOLIA_BURN',
  NFT_SEPOLIA_COLLECTION = 'NFT_SEPOLIA_COLLECTION',
  NFT_SEPOLIA_MINT = 'NFT_SEPOLIA_MINT',
  NFT_SEPOLIA_SET_BASE_URI = 'NFT_SEPOLIA_SET_BASE_URI',
  NFT_SEPOLIA_TRANSFER_COLLECTION = 'NFT_SEPOLIA_TRANSFER_COLLECTION',

  NFT_UNIQUE_BURN = 'NFT_UNIQUE_BURN',
  NFT_UNIQUE_COLLECTION = 'NFT_UNIQUE_COLLECTION',
  NFT_UNIQUE_MINT = 'NFT_UNIQUE_MINT',
  NFT_UNIQUE_SET_BASE_URI = 'NFT_UNIQUE_SET_BASE_URI',
  NFT_UNIQUE_TRANSFER_COLLECTION = 'NFT_UNIQUE_TRANSFER_COLLECTION',

  CONTRACT_ASTAR_CREATE = 'CONTRACT_ASTAR_CREATE',
  CONTRACT_MOONBEAM_CREATE = 'CONTRACT_MOONBEAM_CREATE',
  CONTRACT_MOONBASE_CREATE = 'CONTRACT_MOONBASE_CREATE',
  CONTRACT_ETHEREUM_CREATE = 'CONTRACT_ETHEREUM_CREATE',
  CONTRACT_SEPOLIA_CREATE = 'CONTRACT_SEPOLIA_CREATE',

  CONTRACT_MOONBEAM_CALL = 'CONTRACT_MOONBEAM_CALL',
  CONTRACT_MOONBASE_CALL = 'CONTRACT_MOONBASE_CALL',
  CONTRACT_ASTAR_CALL = 'CONTRACT_ASTAR_CALL',
  CONTRACT_ETHEREUM_CALL = 'CONTRACT_ETHEREUM_CALL',
  CONTRACT_SEPOLIA_CALL = 'CONTRACT_SEPOLIA_CALL',

  COMPUTING_JOB_CREATE = 'COMPUTING_JOB_CREATE',
  COMPUTING_JOB_SET_ENVIRONMENT = 'COMPUTING_JOB_SET_ENVIRONMENT',
  COMPUTING_JOB_DELETE = 'COMPUTING_JOB_DELETE',

  KILT_IDENTITY = 'KILT_IDENTITY',
  OASIS_SIGNATURE = 'OASIS_SIGNATURE',
  IPNS = 'IPNS',
  INDEXER = 'INDEXER',
  SIMPLET = 'SIMPLET',
  SIMPLET_NFT_STUDIO_DEPLOY = 'SIMPLET_NFT_STUDIO_DEPLOY',
}
export enum PriceServiceCategory {
  WEBSITE = 'WEBSITE',
  MOONBEAM_NFT = 'MOONBEAM_NFT',
  MOONBASE_NFT = 'MOONBASE_NFT',
  ASTAR_NFT = 'ASTAR_NFT',
  KILT_IDENTITY = 'KILT_IDENTITY',
  GRILL_CHAT = 'GRILLCHAT',
  SCHRODINGER = 'SCHRODINGER',
  SIGNATURE = 'SIGNATURE',
  ETHEREUM_CONTRACT = 'ETHEREUM_CONTRACT',
  ETHEREUM_NFT = 'ETHEREUM_NFT',
  ARBITRUM_ONE_CONTRACT = 'ARBITRUM_ONE_CONTRACT',
  ARBITRUM_ONE_NFT = 'ARBITRUM_ONE_NFT',
  AVALANCHE_CONTRACT = 'AVALANCHE_CONTRACT',
  AVALANCHE_NFT = 'AVALANCHE_NFT',
  MOONBEAM_CONTRACT = 'MOONBEAM_CONTRACT',
  MOONBASE_CONTRACT = 'MOONBASE_CONTRACT',
  ASTAR_CONTRACT = 'ASTAR_CONTRACT',
  OPTIMISM_CONTRACT = 'OPTIMISM_CONTRACT',
  OPTIMISM_NFT = 'OPTIMISM_NFT',
  POLYGON_CONTRACT = 'POLYGON_CONTRACT',
  POLYGON_NFT = 'POLYGON_NFT',
  SEPOLIA_CONTRACT = 'SEPOLIA_CONTRACT',
  SEPOLIA_NFT = 'SEPOLIA_NFT',
  ACURAST = 'ACURAST',
  IPNS = 'IPNS',
  UNIQUE_NFT = 'UNIQUE_NFT',
  INDEXER = 'INDEXER',
  SIMPLETS_NFT_STUDIO = 'SIMPLETS_NFT_STUDIO',
}
export enum PriceServiceAction {
  BURN = 'BURN',
  COLLECTION = 'COLLECTION',
  MINT = 'MINT',
  SET_BASE_URI = 'SET_BASE_URI',
  TRANSFER_COLLECTION = 'TRANSFER_COLLECTION',
}

/**
 * Service type names (used in store)
 */
export const ServiceTypeNames: { [k: number]: ServiceTypeName } = {
  [ServiceType.AUTHENTICATION]: ServiceTypeName.AUTHENTICATION,
  [ServiceType.STORAGE]: ServiceTypeName.STORAGE,
  [ServiceType.NFT]: ServiceTypeName.NFT,
  [ServiceType.HOSTING]: ServiceTypeName.HOSTING,
  [ServiceType.COMPUTING]: ServiceTypeName.COMPUTING,
  [ServiceType.EMBEDDED_WALLET]: ServiceTypeName.EMBEDDED_WALLET,
};

declare global {
  /**
   * Service Type
   */
  interface ServiceTypeInterface extends BaseObjectInterface {
    active: number;
  }

  /**
   * Service
   */
  interface ServiceTypeInterface extends BaseObjectInterface {
    id: number;
    active: number;
  }
  interface ServiceTypeField extends ServiceTypeInterface {
    enabled: boolean;
  }
  interface ServiceInterface extends BaseObjectInterface {
    active: number;
    serviceType: string;
    serviceType_id: number;
    service_uuid: string;
    key?: number;
    uptime?: string;
  }
  interface CreateServiceResponse extends GeneralResponse<{ id: number; status: number }> {}
  interface ServiceResponse extends GeneralResponse<ServiceInterface> {}
  interface ServicesResponse extends GeneralItemsResponse<ServiceInterface> {}
  interface ServiceTypesResponse extends GeneralResponse<ServiceTypeInterface[]> {}
}

export type ServiceGuide = {
  title: string;
  content: string;
  link: string;
};
